// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package events

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents(in *jlexer.Lexer, out *IAMPolicyStatement) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Action":
			if in.IsNull() {
				in.Skip()
				out.Action = nil
			} else {
				in.Delim('[')
				if out.Action == nil {
					if !in.IsDelim(']') {
						out.Action = make([]string, 0, 4)
					} else {
						out.Action = []string{}
					}
				} else {
					out.Action = (out.Action)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Action = append(out.Action, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Effect":
			out.Effect = string(in.String())
		case "Resource":
			if in.IsNull() {
				in.Skip()
				out.Resource = nil
			} else {
				in.Delim('[')
				if out.Resource == nil {
					if !in.IsDelim(']') {
						out.Resource = make([]string, 0, 4)
					} else {
						out.Resource = []string{}
					}
				} else {
					out.Resource = (out.Resource)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.Resource = append(out.Resource, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents(out *jwriter.Writer, in IAMPolicyStatement) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Action\":"
		out.RawString(prefix[1:])
		if in.Action == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Action {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.String(string(v4))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Effect\":"
		out.RawString(prefix)
		out.String(string(in.Effect))
	}
	{
		const prefix string = ",\"Resource\":"
		out.RawString(prefix)
		if in.Resource == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Resource {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IAMPolicyStatement) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IAMPolicyStatement) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IAMPolicyStatement) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IAMPolicyStatement) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents(l, v)
}
func easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents1(in *jlexer.Lexer, out *APIGatewayWebsocketProxyRequestContext) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "accountId":
			out.AccountID = string(in.String())
		case "resourceId":
			out.ResourceID = string(in.String())
		case "stage":
			out.Stage = string(in.String())
		case "requestId":
			out.RequestID = string(in.String())
		case "identity":
			(out.Identity).UnmarshalEasyJSON(in)
		case "resourcePath":
			out.ResourcePath = string(in.String())
		case "authorizer":
			if m, ok := out.Authorizer.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Authorizer.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Authorizer = in.Interface()
			}
		case "httpMethod":
			out.HTTPMethod = string(in.String())
		case "apiId":
			out.APIID = string(in.String())
		case "connectedAt":
			out.ConnectedAt = int64(in.Int64())
		case "connectionId":
			out.ConnectionID = string(in.String())
		case "domainName":
			out.DomainName = string(in.String())
		case "error":
			out.Error = string(in.String())
		case "eventType":
			out.EventType = string(in.String())
		case "extendedRequestId":
			out.ExtendedRequestID = string(in.String())
		case "integrationLatency":
			out.IntegrationLatency = string(in.String())
		case "messageDirection":
			out.MessageDirection = string(in.String())
		case "messageId":
			if m, ok := out.MessageID.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.MessageID.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.MessageID = in.Interface()
			}
		case "requestTime":
			out.RequestTime = string(in.String())
		case "requestTimeEpoch":
			out.RequestTimeEpoch = int64(in.Int64())
		case "routeKey":
			out.RouteKey = string(in.String())
		case "status":
			out.Status = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents1(out *jwriter.Writer, in APIGatewayWebsocketProxyRequestContext) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"accountId\":"
		out.RawString(prefix[1:])
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"resourceId\":"
		out.RawString(prefix)
		out.String(string(in.ResourceID))
	}
	{
		const prefix string = ",\"stage\":"
		out.RawString(prefix)
		out.String(string(in.Stage))
	}
	{
		const prefix string = ",\"requestId\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	{
		const prefix string = ",\"identity\":"
		out.RawString(prefix)
		(in.Identity).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"resourcePath\":"
		out.RawString(prefix)
		out.String(string(in.ResourcePath))
	}
	{
		const prefix string = ",\"authorizer\":"
		out.RawString(prefix)
		if m, ok := in.Authorizer.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Authorizer.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Authorizer))
		}
	}
	{
		const prefix string = ",\"httpMethod\":"
		out.RawString(prefix)
		out.String(string(in.HTTPMethod))
	}
	{
		const prefix string = ",\"apiId\":"
		out.RawString(prefix)
		out.String(string(in.APIID))
	}
	{
		const prefix string = ",\"connectedAt\":"
		out.RawString(prefix)
		out.Int64(int64(in.ConnectedAt))
	}
	{
		const prefix string = ",\"connectionId\":"
		out.RawString(prefix)
		out.String(string(in.ConnectionID))
	}
	{
		const prefix string = ",\"domainName\":"
		out.RawString(prefix)
		out.String(string(in.DomainName))
	}
	{
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		out.String(string(in.Error))
	}
	{
		const prefix string = ",\"eventType\":"
		out.RawString(prefix)
		out.String(string(in.EventType))
	}
	{
		const prefix string = ",\"extendedRequestId\":"
		out.RawString(prefix)
		out.String(string(in.ExtendedRequestID))
	}
	{
		const prefix string = ",\"integrationLatency\":"
		out.RawString(prefix)
		out.String(string(in.IntegrationLatency))
	}
	{
		const prefix string = ",\"messageDirection\":"
		out.RawString(prefix)
		out.String(string(in.MessageDirection))
	}
	{
		const prefix string = ",\"messageId\":"
		out.RawString(prefix)
		if m, ok := in.MessageID.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.MessageID.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.MessageID))
		}
	}
	{
		const prefix string = ",\"requestTime\":"
		out.RawString(prefix)
		out.String(string(in.RequestTime))
	}
	{
		const prefix string = ",\"requestTimeEpoch\":"
		out.RawString(prefix)
		out.Int64(int64(in.RequestTimeEpoch))
	}
	{
		const prefix string = ",\"routeKey\":"
		out.RawString(prefix)
		out.String(string(in.RouteKey))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v APIGatewayWebsocketProxyRequestContext) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v APIGatewayWebsocketProxyRequestContext) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *APIGatewayWebsocketProxyRequestContext) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *APIGatewayWebsocketProxyRequestContext) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents1(l, v)
}
func easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents2(in *jlexer.Lexer, out *APIGatewayWebsocketProxyRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "resource":
			out.Resource = string(in.String())
		case "path":
			out.Path = string(in.String())
		case "httpMethod":
			out.HTTPMethod = string(in.String())
		case "headers":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Headers = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v7 string
					v7 = string(in.String())
					(out.Headers)[key] = v7
					in.WantComma()
				}
				in.Delim('}')
			}
		case "multiValueHeaders":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.MultiValueHeaders = make(map[string][]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v8 []string
					if in.IsNull() {
						in.Skip()
						v8 = nil
					} else {
						in.Delim('[')
						if v8 == nil {
							if !in.IsDelim(']') {
								v8 = make([]string, 0, 4)
							} else {
								v8 = []string{}
							}
						} else {
							v8 = (v8)[:0]
						}
						for !in.IsDelim(']') {
							var v9 string
							v9 = string(in.String())
							v8 = append(v8, v9)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.MultiValueHeaders)[key] = v8
					in.WantComma()
				}
				in.Delim('}')
			}
		case "queryStringParameters":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.QueryStringParameters = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v10 string
					v10 = string(in.String())
					(out.QueryStringParameters)[key] = v10
					in.WantComma()
				}
				in.Delim('}')
			}
		case "multiValueQueryStringParameters":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.MultiValueQueryStringParameters = make(map[string][]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v11 []string
					if in.IsNull() {
						in.Skip()
						v11 = nil
					} else {
						in.Delim('[')
						if v11 == nil {
							if !in.IsDelim(']') {
								v11 = make([]string, 0, 4)
							} else {
								v11 = []string{}
							}
						} else {
							v11 = (v11)[:0]
						}
						for !in.IsDelim(']') {
							var v12 string
							v12 = string(in.String())
							v11 = append(v11, v12)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.MultiValueQueryStringParameters)[key] = v11
					in.WantComma()
				}
				in.Delim('}')
			}
		case "pathParameters":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.PathParameters = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v13 string
					v13 = string(in.String())
					(out.PathParameters)[key] = v13
					in.WantComma()
				}
				in.Delim('}')
			}
		case "stageVariables":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.StageVariables = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v14 string
					v14 = string(in.String())
					(out.StageVariables)[key] = v14
					in.WantComma()
				}
				in.Delim('}')
			}
		case "requestContext":
			(out.RequestContext).UnmarshalEasyJSON(in)
		case "body":
			out.Body = string(in.String())
		case "isBase64Encoded":
			out.IsBase64Encoded = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents2(out *jwriter.Writer, in APIGatewayWebsocketProxyRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"resource\":"
		out.RawString(prefix[1:])
		out.String(string(in.Resource))
	}
	{
		const prefix string = ",\"path\":"
		out.RawString(prefix)
		out.String(string(in.Path))
	}
	{
		const prefix string = ",\"httpMethod\":"
		out.RawString(prefix)
		out.String(string(in.HTTPMethod))
	}
	{
		const prefix string = ",\"headers\":"
		out.RawString(prefix)
		if in.Headers == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v15First := true
			for v15Name, v15Value := range in.Headers {
				if v15First {
					v15First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v15Name))
				out.RawByte(':')
				out.String(string(v15Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"multiValueHeaders\":"
		out.RawString(prefix)
		if in.MultiValueHeaders == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v16First := true
			for v16Name, v16Value := range in.MultiValueHeaders {
				if v16First {
					v16First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v16Name))
				out.RawByte(':')
				if v16Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v17, v18 := range v16Value {
						if v17 > 0 {
							out.RawByte(',')
						}
						out.String(string(v18))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"queryStringParameters\":"
		out.RawString(prefix)
		if in.QueryStringParameters == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v19First := true
			for v19Name, v19Value := range in.QueryStringParameters {
				if v19First {
					v19First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v19Name))
				out.RawByte(':')
				out.String(string(v19Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"multiValueQueryStringParameters\":"
		out.RawString(prefix)
		if in.MultiValueQueryStringParameters == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v20First := true
			for v20Name, v20Value := range in.MultiValueQueryStringParameters {
				if v20First {
					v20First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v20Name))
				out.RawByte(':')
				if v20Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v21, v22 := range v20Value {
						if v21 > 0 {
							out.RawByte(',')
						}
						out.String(string(v22))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"pathParameters\":"
		out.RawString(prefix)
		if in.PathParameters == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v23First := true
			for v23Name, v23Value := range in.PathParameters {
				if v23First {
					v23First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v23Name))
				out.RawByte(':')
				out.String(string(v23Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"stageVariables\":"
		out.RawString(prefix)
		if in.StageVariables == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v24First := true
			for v24Name, v24Value := range in.StageVariables {
				if v24First {
					v24First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v24Name))
				out.RawByte(':')
				out.String(string(v24Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"requestContext\":"
		out.RawString(prefix)
		(in.RequestContext).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		out.String(string(in.Body))
	}
	if in.IsBase64Encoded {
		const prefix string = ",\"isBase64Encoded\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsBase64Encoded))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v APIGatewayWebsocketProxyRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v APIGatewayWebsocketProxyRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *APIGatewayWebsocketProxyRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *APIGatewayWebsocketProxyRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents2(l, v)
}
func easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents3(in *jlexer.Lexer, out *APIGatewayV2HTTPResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "statusCode":
			out.StatusCode = int(in.Int())
		case "headers":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Headers = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v25 string
					v25 = string(in.String())
					(out.Headers)[key] = v25
					in.WantComma()
				}
				in.Delim('}')
			}
		case "multiValueHeaders":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.MultiValueHeaders = make(map[string][]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v26 []string
					if in.IsNull() {
						in.Skip()
						v26 = nil
					} else {
						in.Delim('[')
						if v26 == nil {
							if !in.IsDelim(']') {
								v26 = make([]string, 0, 4)
							} else {
								v26 = []string{}
							}
						} else {
							v26 = (v26)[:0]
						}
						for !in.IsDelim(']') {
							var v27 string
							v27 = string(in.String())
							v26 = append(v26, v27)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.MultiValueHeaders)[key] = v26
					in.WantComma()
				}
				in.Delim('}')
			}
		case "body":
			out.Body = string(in.String())
		case "isBase64Encoded":
			out.IsBase64Encoded = bool(in.Bool())
		case "cookies":
			if in.IsNull() {
				in.Skip()
				out.Cookies = nil
			} else {
				in.Delim('[')
				if out.Cookies == nil {
					if !in.IsDelim(']') {
						out.Cookies = make([]string, 0, 4)
					} else {
						out.Cookies = []string{}
					}
				} else {
					out.Cookies = (out.Cookies)[:0]
				}
				for !in.IsDelim(']') {
					var v28 string
					v28 = string(in.String())
					out.Cookies = append(out.Cookies, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents3(out *jwriter.Writer, in APIGatewayV2HTTPResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"statusCode\":"
		out.RawString(prefix[1:])
		out.Int(int(in.StatusCode))
	}
	{
		const prefix string = ",\"headers\":"
		out.RawString(prefix)
		if in.Headers == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v29First := true
			for v29Name, v29Value := range in.Headers {
				if v29First {
					v29First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v29Name))
				out.RawByte(':')
				out.String(string(v29Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"multiValueHeaders\":"
		out.RawString(prefix)
		if in.MultiValueHeaders == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v30First := true
			for v30Name, v30Value := range in.MultiValueHeaders {
				if v30First {
					v30First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v30Name))
				out.RawByte(':')
				if v30Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v31, v32 := range v30Value {
						if v31 > 0 {
							out.RawByte(',')
						}
						out.String(string(v32))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		out.String(string(in.Body))
	}
	if in.IsBase64Encoded {
		const prefix string = ",\"isBase64Encoded\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsBase64Encoded))
	}
	{
		const prefix string = ",\"cookies\":"
		out.RawString(prefix)
		if in.Cookies == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v33, v34 := range in.Cookies {
				if v33 > 0 {
					out.RawByte(',')
				}
				out.String(string(v34))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v APIGatewayV2HTTPResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v APIGatewayV2HTTPResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *APIGatewayV2HTTPResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *APIGatewayV2HTTPResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents3(l, v)
}
func easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents4(in *jlexer.Lexer, out *APIGatewayV2HTTPRequestContextHTTPDescription) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "method":
			out.Method = string(in.String())
		case "path":
			out.Path = string(in.String())
		case "protocol":
			out.Protocol = string(in.String())
		case "sourceIp":
			out.SourceIP = string(in.String())
		case "userAgent":
			out.UserAgent = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents4(out *jwriter.Writer, in APIGatewayV2HTTPRequestContextHTTPDescription) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"method\":"
		out.RawString(prefix[1:])
		out.String(string(in.Method))
	}
	{
		const prefix string = ",\"path\":"
		out.RawString(prefix)
		out.String(string(in.Path))
	}
	{
		const prefix string = ",\"protocol\":"
		out.RawString(prefix)
		out.String(string(in.Protocol))
	}
	{
		const prefix string = ",\"sourceIp\":"
		out.RawString(prefix)
		out.String(string(in.SourceIP))
	}
	{
		const prefix string = ",\"userAgent\":"
		out.RawString(prefix)
		out.String(string(in.UserAgent))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v APIGatewayV2HTTPRequestContextHTTPDescription) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v APIGatewayV2HTTPRequestContextHTTPDescription) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *APIGatewayV2HTTPRequestContextHTTPDescription) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *APIGatewayV2HTTPRequestContextHTTPDescription) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents4(l, v)
}
func easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents5(in *jlexer.Lexer, out *APIGatewayV2HTTPRequestContextAuthorizerJWTDescription) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "claims":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Claims = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v35 string
					v35 = string(in.String())
					(out.Claims)[key] = v35
					in.WantComma()
				}
				in.Delim('}')
			}
		case "scopes":
			if in.IsNull() {
				in.Skip()
				out.Scopes = nil
			} else {
				in.Delim('[')
				if out.Scopes == nil {
					if !in.IsDelim(']') {
						out.Scopes = make([]string, 0, 4)
					} else {
						out.Scopes = []string{}
					}
				} else {
					out.Scopes = (out.Scopes)[:0]
				}
				for !in.IsDelim(']') {
					var v36 string
					v36 = string(in.String())
					out.Scopes = append(out.Scopes, v36)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents5(out *jwriter.Writer, in APIGatewayV2HTTPRequestContextAuthorizerJWTDescription) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"claims\":"
		out.RawString(prefix[1:])
		if in.Claims == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v37First := true
			for v37Name, v37Value := range in.Claims {
				if v37First {
					v37First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v37Name))
				out.RawByte(':')
				out.String(string(v37Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Scopes) != 0 {
		const prefix string = ",\"scopes\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v38, v39 := range in.Scopes {
				if v38 > 0 {
					out.RawByte(',')
				}
				out.String(string(v39))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v APIGatewayV2HTTPRequestContextAuthorizerJWTDescription) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v APIGatewayV2HTTPRequestContextAuthorizerJWTDescription) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *APIGatewayV2HTTPRequestContextAuthorizerJWTDescription) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *APIGatewayV2HTTPRequestContextAuthorizerJWTDescription) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents5(l, v)
}
func easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents6(in *jlexer.Lexer, out *APIGatewayV2HTTPRequestContextAuthorizerIAMDescription) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "accessKey":
			out.AccessKey = string(in.String())
		case "accountId":
			out.AccountID = string(in.String())
		case "callerId":
			out.CallerID = string(in.String())
		case "cognitoIdentity":
			(out.CognitoIdentity).UnmarshalEasyJSON(in)
		case "principalOrgId":
			out.PrincipalOrgID = string(in.String())
		case "userArn":
			out.UserARN = string(in.String())
		case "userId":
			out.UserID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents6(out *jwriter.Writer, in APIGatewayV2HTTPRequestContextAuthorizerIAMDescription) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"accessKey\":"
		out.RawString(prefix[1:])
		out.String(string(in.AccessKey))
	}
	{
		const prefix string = ",\"accountId\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"callerId\":"
		out.RawString(prefix)
		out.String(string(in.CallerID))
	}
	if true {
		const prefix string = ",\"cognitoIdentity\":"
		out.RawString(prefix)
		(in.CognitoIdentity).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"principalOrgId\":"
		out.RawString(prefix)
		out.String(string(in.PrincipalOrgID))
	}
	{
		const prefix string = ",\"userArn\":"
		out.RawString(prefix)
		out.String(string(in.UserARN))
	}
	{
		const prefix string = ",\"userId\":"
		out.RawString(prefix)
		out.String(string(in.UserID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v APIGatewayV2HTTPRequestContextAuthorizerIAMDescription) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v APIGatewayV2HTTPRequestContextAuthorizerIAMDescription) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *APIGatewayV2HTTPRequestContextAuthorizerIAMDescription) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *APIGatewayV2HTTPRequestContextAuthorizerIAMDescription) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents6(l, v)
}
func easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents7(in *jlexer.Lexer, out *APIGatewayV2HTTPRequestContextAuthorizerDescription) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "jwt":
			if in.IsNull() {
				in.Skip()
				out.JWT = nil
			} else {
				if out.JWT == nil {
					out.JWT = new(APIGatewayV2HTTPRequestContextAuthorizerJWTDescription)
				}
				(*out.JWT).UnmarshalEasyJSON(in)
			}
		case "lambda":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Lambda = make(map[string]interface{})
				} else {
					out.Lambda = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v40 interface{}
					if m, ok := v40.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v40.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v40 = in.Interface()
					}
					(out.Lambda)[key] = v40
					in.WantComma()
				}
				in.Delim('}')
			}
		case "iam":
			if in.IsNull() {
				in.Skip()
				out.IAM = nil
			} else {
				if out.IAM == nil {
					out.IAM = new(APIGatewayV2HTTPRequestContextAuthorizerIAMDescription)
				}
				(*out.IAM).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents7(out *jwriter.Writer, in APIGatewayV2HTTPRequestContextAuthorizerDescription) {
	out.RawByte('{')
	first := true
	_ = first
	if in.JWT != nil {
		const prefix string = ",\"jwt\":"
		first = false
		out.RawString(prefix[1:])
		(*in.JWT).MarshalEasyJSON(out)
	}
	if len(in.Lambda) != 0 {
		const prefix string = ",\"lambda\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v41First := true
			for v41Name, v41Value := range in.Lambda {
				if v41First {
					v41First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v41Name))
				out.RawByte(':')
				if m, ok := v41Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v41Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v41Value))
				}
			}
			out.RawByte('}')
		}
	}
	if in.IAM != nil {
		const prefix string = ",\"iam\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.IAM).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v APIGatewayV2HTTPRequestContextAuthorizerDescription) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v APIGatewayV2HTTPRequestContextAuthorizerDescription) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *APIGatewayV2HTTPRequestContextAuthorizerDescription) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *APIGatewayV2HTTPRequestContextAuthorizerDescription) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents7(l, v)
}
func easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents8(in *jlexer.Lexer, out *APIGatewayV2HTTPRequestContextAuthorizerCognitoIdentity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "amr":
			if in.IsNull() {
				in.Skip()
				out.AMR = nil
			} else {
				in.Delim('[')
				if out.AMR == nil {
					if !in.IsDelim(']') {
						out.AMR = make([]string, 0, 4)
					} else {
						out.AMR = []string{}
					}
				} else {
					out.AMR = (out.AMR)[:0]
				}
				for !in.IsDelim(']') {
					var v42 string
					v42 = string(in.String())
					out.AMR = append(out.AMR, v42)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "identityId":
			out.IdentityID = string(in.String())
		case "identityPoolId":
			out.IdentityPoolID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents8(out *jwriter.Writer, in APIGatewayV2HTTPRequestContextAuthorizerCognitoIdentity) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"amr\":"
		out.RawString(prefix[1:])
		if in.AMR == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v43, v44 := range in.AMR {
				if v43 > 0 {
					out.RawByte(',')
				}
				out.String(string(v44))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"identityId\":"
		out.RawString(prefix)
		out.String(string(in.IdentityID))
	}
	{
		const prefix string = ",\"identityPoolId\":"
		out.RawString(prefix)
		out.String(string(in.IdentityPoolID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v APIGatewayV2HTTPRequestContextAuthorizerCognitoIdentity) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v APIGatewayV2HTTPRequestContextAuthorizerCognitoIdentity) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *APIGatewayV2HTTPRequestContextAuthorizerCognitoIdentity) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *APIGatewayV2HTTPRequestContextAuthorizerCognitoIdentity) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents8(l, v)
}
func easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents9(in *jlexer.Lexer, out *APIGatewayV2HTTPRequestContext) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "routeKey":
			out.RouteKey = string(in.String())
		case "accountId":
			out.AccountID = string(in.String())
		case "stage":
			out.Stage = string(in.String())
		case "requestId":
			out.RequestID = string(in.String())
		case "authorizer":
			if in.IsNull() {
				in.Skip()
				out.Authorizer = nil
			} else {
				if out.Authorizer == nil {
					out.Authorizer = new(APIGatewayV2HTTPRequestContextAuthorizerDescription)
				}
				(*out.Authorizer).UnmarshalEasyJSON(in)
			}
		case "apiId":
			out.APIID = string(in.String())
		case "domainName":
			out.DomainName = string(in.String())
		case "domainPrefix":
			out.DomainPrefix = string(in.String())
		case "time":
			out.Time = string(in.String())
		case "timeEpoch":
			out.TimeEpoch = int64(in.Int64())
		case "http":
			(out.HTTP).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents9(out *jwriter.Writer, in APIGatewayV2HTTPRequestContext) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"routeKey\":"
		out.RawString(prefix[1:])
		out.String(string(in.RouteKey))
	}
	{
		const prefix string = ",\"accountId\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"stage\":"
		out.RawString(prefix)
		out.String(string(in.Stage))
	}
	{
		const prefix string = ",\"requestId\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	if in.Authorizer != nil {
		const prefix string = ",\"authorizer\":"
		out.RawString(prefix)
		(*in.Authorizer).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"apiId\":"
		out.RawString(prefix)
		out.String(string(in.APIID))
	}
	{
		const prefix string = ",\"domainName\":"
		out.RawString(prefix)
		out.String(string(in.DomainName))
	}
	{
		const prefix string = ",\"domainPrefix\":"
		out.RawString(prefix)
		out.String(string(in.DomainPrefix))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Time))
	}
	{
		const prefix string = ",\"timeEpoch\":"
		out.RawString(prefix)
		out.Int64(int64(in.TimeEpoch))
	}
	{
		const prefix string = ",\"http\":"
		out.RawString(prefix)
		(in.HTTP).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v APIGatewayV2HTTPRequestContext) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v APIGatewayV2HTTPRequestContext) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *APIGatewayV2HTTPRequestContext) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *APIGatewayV2HTTPRequestContext) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents9(l, v)
}
func easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents10(in *jlexer.Lexer, out *APIGatewayV2HTTPRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "version":
			out.Version = string(in.String())
		case "routeKey":
			out.RouteKey = string(in.String())
		case "rawPath":
			out.RawPath = string(in.String())
		case "rawQueryString":
			out.RawQueryString = string(in.String())
		case "cookies":
			if in.IsNull() {
				in.Skip()
				out.Cookies = nil
			} else {
				in.Delim('[')
				if out.Cookies == nil {
					if !in.IsDelim(']') {
						out.Cookies = make([]string, 0, 4)
					} else {
						out.Cookies = []string{}
					}
				} else {
					out.Cookies = (out.Cookies)[:0]
				}
				for !in.IsDelim(']') {
					var v45 string
					v45 = string(in.String())
					out.Cookies = append(out.Cookies, v45)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "headers":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Headers = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v46 string
					v46 = string(in.String())
					(out.Headers)[key] = v46
					in.WantComma()
				}
				in.Delim('}')
			}
		case "queryStringParameters":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.QueryStringParameters = make(map[string]string)
				} else {
					out.QueryStringParameters = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v47 string
					v47 = string(in.String())
					(out.QueryStringParameters)[key] = v47
					in.WantComma()
				}
				in.Delim('}')
			}
		case "pathParameters":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.PathParameters = make(map[string]string)
				} else {
					out.PathParameters = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v48 string
					v48 = string(in.String())
					(out.PathParameters)[key] = v48
					in.WantComma()
				}
				in.Delim('}')
			}
		case "requestContext":
			(out.RequestContext).UnmarshalEasyJSON(in)
		case "stageVariables":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.StageVariables = make(map[string]string)
				} else {
					out.StageVariables = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v49 string
					v49 = string(in.String())
					(out.StageVariables)[key] = v49
					in.WantComma()
				}
				in.Delim('}')
			}
		case "body":
			out.Body = string(in.String())
		case "isBase64Encoded":
			out.IsBase64Encoded = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents10(out *jwriter.Writer, in APIGatewayV2HTTPRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix[1:])
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"routeKey\":"
		out.RawString(prefix)
		out.String(string(in.RouteKey))
	}
	{
		const prefix string = ",\"rawPath\":"
		out.RawString(prefix)
		out.String(string(in.RawPath))
	}
	{
		const prefix string = ",\"rawQueryString\":"
		out.RawString(prefix)
		out.String(string(in.RawQueryString))
	}
	if len(in.Cookies) != 0 {
		const prefix string = ",\"cookies\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v50, v51 := range in.Cookies {
				if v50 > 0 {
					out.RawByte(',')
				}
				out.String(string(v51))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"headers\":"
		out.RawString(prefix)
		if in.Headers == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v52First := true
			for v52Name, v52Value := range in.Headers {
				if v52First {
					v52First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v52Name))
				out.RawByte(':')
				out.String(string(v52Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.QueryStringParameters) != 0 {
		const prefix string = ",\"queryStringParameters\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v53First := true
			for v53Name, v53Value := range in.QueryStringParameters {
				if v53First {
					v53First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v53Name))
				out.RawByte(':')
				out.String(string(v53Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.PathParameters) != 0 {
		const prefix string = ",\"pathParameters\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v54First := true
			for v54Name, v54Value := range in.PathParameters {
				if v54First {
					v54First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v54Name))
				out.RawByte(':')
				out.String(string(v54Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"requestContext\":"
		out.RawString(prefix)
		(in.RequestContext).MarshalEasyJSON(out)
	}
	if len(in.StageVariables) != 0 {
		const prefix string = ",\"stageVariables\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v55First := true
			for v55Name, v55Value := range in.StageVariables {
				if v55First {
					v55First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v55Name))
				out.RawByte(':')
				out.String(string(v55Value))
			}
			out.RawByte('}')
		}
	}
	if in.Body != "" {
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		out.String(string(in.Body))
	}
	{
		const prefix string = ",\"isBase64Encoded\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsBase64Encoded))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v APIGatewayV2HTTPRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v APIGatewayV2HTTPRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *APIGatewayV2HTTPRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *APIGatewayV2HTTPRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents10(l, v)
}
func easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents11(in *jlexer.Lexer, out *APIGatewayRequestIdentity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cognitoIdentityPoolId":
			out.CognitoIdentityPoolID = string(in.String())
		case "accountId":
			out.AccountID = string(in.String())
		case "cognitoIdentityId":
			out.CognitoIdentityID = string(in.String())
		case "caller":
			out.Caller = string(in.String())
		case "apiKey":
			out.APIKey = string(in.String())
		case "apiKeyId":
			out.APIKeyID = string(in.String())
		case "accessKey":
			out.AccessKey = string(in.String())
		case "sourceIp":
			out.SourceIP = string(in.String())
		case "cognitoAuthenticationType":
			out.CognitoAuthenticationType = string(in.String())
		case "cognitoAuthenticationProvider":
			out.CognitoAuthenticationProvider = string(in.String())
		case "userArn":
			out.UserArn = string(in.String())
		case "userAgent":
			out.UserAgent = string(in.String())
		case "user":
			out.User = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents11(out *jwriter.Writer, in APIGatewayRequestIdentity) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cognitoIdentityPoolId\":"
		out.RawString(prefix[1:])
		out.String(string(in.CognitoIdentityPoolID))
	}
	{
		const prefix string = ",\"accountId\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"cognitoIdentityId\":"
		out.RawString(prefix)
		out.String(string(in.CognitoIdentityID))
	}
	{
		const prefix string = ",\"caller\":"
		out.RawString(prefix)
		out.String(string(in.Caller))
	}
	{
		const prefix string = ",\"apiKey\":"
		out.RawString(prefix)
		out.String(string(in.APIKey))
	}
	{
		const prefix string = ",\"apiKeyId\":"
		out.RawString(prefix)
		out.String(string(in.APIKeyID))
	}
	{
		const prefix string = ",\"accessKey\":"
		out.RawString(prefix)
		out.String(string(in.AccessKey))
	}
	{
		const prefix string = ",\"sourceIp\":"
		out.RawString(prefix)
		out.String(string(in.SourceIP))
	}
	{
		const prefix string = ",\"cognitoAuthenticationType\":"
		out.RawString(prefix)
		out.String(string(in.CognitoAuthenticationType))
	}
	{
		const prefix string = ",\"cognitoAuthenticationProvider\":"
		out.RawString(prefix)
		out.String(string(in.CognitoAuthenticationProvider))
	}
	{
		const prefix string = ",\"userArn\":"
		out.RawString(prefix)
		out.String(string(in.UserArn))
	}
	{
		const prefix string = ",\"userAgent\":"
		out.RawString(prefix)
		out.String(string(in.UserAgent))
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.User))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v APIGatewayRequestIdentity) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v APIGatewayRequestIdentity) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *APIGatewayRequestIdentity) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *APIGatewayRequestIdentity) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents11(l, v)
}
func easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents12(in *jlexer.Lexer, out *APIGatewayProxyResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "statusCode":
			out.StatusCode = int(in.Int())
		case "headers":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Headers = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v56 string
					v56 = string(in.String())
					(out.Headers)[key] = v56
					in.WantComma()
				}
				in.Delim('}')
			}
		case "multiValueHeaders":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.MultiValueHeaders = make(map[string][]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v57 []string
					if in.IsNull() {
						in.Skip()
						v57 = nil
					} else {
						in.Delim('[')
						if v57 == nil {
							if !in.IsDelim(']') {
								v57 = make([]string, 0, 4)
							} else {
								v57 = []string{}
							}
						} else {
							v57 = (v57)[:0]
						}
						for !in.IsDelim(']') {
							var v58 string
							v58 = string(in.String())
							v57 = append(v57, v58)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.MultiValueHeaders)[key] = v57
					in.WantComma()
				}
				in.Delim('}')
			}
		case "body":
			out.Body = string(in.String())
		case "isBase64Encoded":
			out.IsBase64Encoded = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents12(out *jwriter.Writer, in APIGatewayProxyResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"statusCode\":"
		out.RawString(prefix[1:])
		out.Int(int(in.StatusCode))
	}
	{
		const prefix string = ",\"headers\":"
		out.RawString(prefix)
		if in.Headers == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v59First := true
			for v59Name, v59Value := range in.Headers {
				if v59First {
					v59First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v59Name))
				out.RawByte(':')
				out.String(string(v59Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"multiValueHeaders\":"
		out.RawString(prefix)
		if in.MultiValueHeaders == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v60First := true
			for v60Name, v60Value := range in.MultiValueHeaders {
				if v60First {
					v60First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v60Name))
				out.RawByte(':')
				if v60Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v61, v62 := range v60Value {
						if v61 > 0 {
							out.RawByte(',')
						}
						out.String(string(v62))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		out.String(string(in.Body))
	}
	if in.IsBase64Encoded {
		const prefix string = ",\"isBase64Encoded\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsBase64Encoded))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v APIGatewayProxyResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v APIGatewayProxyResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *APIGatewayProxyResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *APIGatewayProxyResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents12(l, v)
}
func easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents13(in *jlexer.Lexer, out *APIGatewayProxyRequestContext) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "accountId":
			out.AccountID = string(in.String())
		case "resourceId":
			out.ResourceID = string(in.String())
		case "operationName":
			out.OperationName = string(in.String())
		case "stage":
			out.Stage = string(in.String())
		case "domainName":
			out.DomainName = string(in.String())
		case "domainPrefix":
			out.DomainPrefix = string(in.String())
		case "requestId":
			out.RequestID = string(in.String())
		case "protocol":
			out.Protocol = string(in.String())
		case "identity":
			(out.Identity).UnmarshalEasyJSON(in)
		case "resourcePath":
			out.ResourcePath = string(in.String())
		case "authorizer":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Authorizer = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v63 interface{}
					if m, ok := v63.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v63.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v63 = in.Interface()
					}
					(out.Authorizer)[key] = v63
					in.WantComma()
				}
				in.Delim('}')
			}
		case "httpMethod":
			out.HTTPMethod = string(in.String())
		case "requestTime":
			out.RequestTime = string(in.String())
		case "requestTimeEpoch":
			out.RequestTimeEpoch = int64(in.Int64())
		case "apiId":
			out.APIID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents13(out *jwriter.Writer, in APIGatewayProxyRequestContext) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"accountId\":"
		out.RawString(prefix[1:])
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"resourceId\":"
		out.RawString(prefix)
		out.String(string(in.ResourceID))
	}
	if in.OperationName != "" {
		const prefix string = ",\"operationName\":"
		out.RawString(prefix)
		out.String(string(in.OperationName))
	}
	{
		const prefix string = ",\"stage\":"
		out.RawString(prefix)
		out.String(string(in.Stage))
	}
	{
		const prefix string = ",\"domainName\":"
		out.RawString(prefix)
		out.String(string(in.DomainName))
	}
	{
		const prefix string = ",\"domainPrefix\":"
		out.RawString(prefix)
		out.String(string(in.DomainPrefix))
	}
	{
		const prefix string = ",\"requestId\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	{
		const prefix string = ",\"protocol\":"
		out.RawString(prefix)
		out.String(string(in.Protocol))
	}
	{
		const prefix string = ",\"identity\":"
		out.RawString(prefix)
		(in.Identity).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"resourcePath\":"
		out.RawString(prefix)
		out.String(string(in.ResourcePath))
	}
	{
		const prefix string = ",\"authorizer\":"
		out.RawString(prefix)
		if in.Authorizer == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v64First := true
			for v64Name, v64Value := range in.Authorizer {
				if v64First {
					v64First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v64Name))
				out.RawByte(':')
				if m, ok := v64Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v64Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v64Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"httpMethod\":"
		out.RawString(prefix)
		out.String(string(in.HTTPMethod))
	}
	{
		const prefix string = ",\"requestTime\":"
		out.RawString(prefix)
		out.String(string(in.RequestTime))
	}
	{
		const prefix string = ",\"requestTimeEpoch\":"
		out.RawString(prefix)
		out.Int64(int64(in.RequestTimeEpoch))
	}
	{
		const prefix string = ",\"apiId\":"
		out.RawString(prefix)
		out.String(string(in.APIID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v APIGatewayProxyRequestContext) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v APIGatewayProxyRequestContext) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *APIGatewayProxyRequestContext) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *APIGatewayProxyRequestContext) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents13(l, v)
}
func easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents14(in *jlexer.Lexer, out *APIGatewayProxyRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "resource":
			out.Resource = string(in.String())
		case "path":
			out.Path = string(in.String())
		case "httpMethod":
			out.HTTPMethod = string(in.String())
		case "headers":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Headers = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v65 string
					v65 = string(in.String())
					(out.Headers)[key] = v65
					in.WantComma()
				}
				in.Delim('}')
			}
		case "multiValueHeaders":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.MultiValueHeaders = make(map[string][]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v66 []string
					if in.IsNull() {
						in.Skip()
						v66 = nil
					} else {
						in.Delim('[')
						if v66 == nil {
							if !in.IsDelim(']') {
								v66 = make([]string, 0, 4)
							} else {
								v66 = []string{}
							}
						} else {
							v66 = (v66)[:0]
						}
						for !in.IsDelim(']') {
							var v67 string
							v67 = string(in.String())
							v66 = append(v66, v67)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.MultiValueHeaders)[key] = v66
					in.WantComma()
				}
				in.Delim('}')
			}
		case "queryStringParameters":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.QueryStringParameters = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v68 string
					v68 = string(in.String())
					(out.QueryStringParameters)[key] = v68
					in.WantComma()
				}
				in.Delim('}')
			}
		case "multiValueQueryStringParameters":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.MultiValueQueryStringParameters = make(map[string][]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v69 []string
					if in.IsNull() {
						in.Skip()
						v69 = nil
					} else {
						in.Delim('[')
						if v69 == nil {
							if !in.IsDelim(']') {
								v69 = make([]string, 0, 4)
							} else {
								v69 = []string{}
							}
						} else {
							v69 = (v69)[:0]
						}
						for !in.IsDelim(']') {
							var v70 string
							v70 = string(in.String())
							v69 = append(v69, v70)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.MultiValueQueryStringParameters)[key] = v69
					in.WantComma()
				}
				in.Delim('}')
			}
		case "pathParameters":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.PathParameters = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v71 string
					v71 = string(in.String())
					(out.PathParameters)[key] = v71
					in.WantComma()
				}
				in.Delim('}')
			}
		case "stageVariables":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.StageVariables = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v72 string
					v72 = string(in.String())
					(out.StageVariables)[key] = v72
					in.WantComma()
				}
				in.Delim('}')
			}
		case "requestContext":
			(out.RequestContext).UnmarshalEasyJSON(in)
		case "body":
			out.Body = string(in.String())
		case "isBase64Encoded":
			out.IsBase64Encoded = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents14(out *jwriter.Writer, in APIGatewayProxyRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"resource\":"
		out.RawString(prefix[1:])
		out.String(string(in.Resource))
	}
	{
		const prefix string = ",\"path\":"
		out.RawString(prefix)
		out.String(string(in.Path))
	}
	{
		const prefix string = ",\"httpMethod\":"
		out.RawString(prefix)
		out.String(string(in.HTTPMethod))
	}
	{
		const prefix string = ",\"headers\":"
		out.RawString(prefix)
		if in.Headers == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v73First := true
			for v73Name, v73Value := range in.Headers {
				if v73First {
					v73First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v73Name))
				out.RawByte(':')
				out.String(string(v73Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"multiValueHeaders\":"
		out.RawString(prefix)
		if in.MultiValueHeaders == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v74First := true
			for v74Name, v74Value := range in.MultiValueHeaders {
				if v74First {
					v74First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v74Name))
				out.RawByte(':')
				if v74Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v75, v76 := range v74Value {
						if v75 > 0 {
							out.RawByte(',')
						}
						out.String(string(v76))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"queryStringParameters\":"
		out.RawString(prefix)
		if in.QueryStringParameters == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v77First := true
			for v77Name, v77Value := range in.QueryStringParameters {
				if v77First {
					v77First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v77Name))
				out.RawByte(':')
				out.String(string(v77Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"multiValueQueryStringParameters\":"
		out.RawString(prefix)
		if in.MultiValueQueryStringParameters == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v78First := true
			for v78Name, v78Value := range in.MultiValueQueryStringParameters {
				if v78First {
					v78First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v78Name))
				out.RawByte(':')
				if v78Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v79, v80 := range v78Value {
						if v79 > 0 {
							out.RawByte(',')
						}
						out.String(string(v80))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"pathParameters\":"
		out.RawString(prefix)
		if in.PathParameters == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v81First := true
			for v81Name, v81Value := range in.PathParameters {
				if v81First {
					v81First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v81Name))
				out.RawByte(':')
				out.String(string(v81Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"stageVariables\":"
		out.RawString(prefix)
		if in.StageVariables == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v82First := true
			for v82Name, v82Value := range in.StageVariables {
				if v82First {
					v82First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v82Name))
				out.RawByte(':')
				out.String(string(v82Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"requestContext\":"
		out.RawString(prefix)
		(in.RequestContext).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		out.String(string(in.Body))
	}
	if in.IsBase64Encoded {
		const prefix string = ",\"isBase64Encoded\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsBase64Encoded))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v APIGatewayProxyRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v APIGatewayProxyRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *APIGatewayProxyRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *APIGatewayProxyRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents14(l, v)
}
func easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents15(in *jlexer.Lexer, out *APIGatewayCustomAuthorizerResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "principalId":
			out.PrincipalID = string(in.String())
		case "policyDocument":
			(out.PolicyDocument).UnmarshalEasyJSON(in)
		case "context":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Context = make(map[string]interface{})
				} else {
					out.Context = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v83 interface{}
					if m, ok := v83.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v83.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v83 = in.Interface()
					}
					(out.Context)[key] = v83
					in.WantComma()
				}
				in.Delim('}')
			}
		case "usageIdentifierKey":
			out.UsageIdentifierKey = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents15(out *jwriter.Writer, in APIGatewayCustomAuthorizerResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"principalId\":"
		out.RawString(prefix[1:])
		out.String(string(in.PrincipalID))
	}
	{
		const prefix string = ",\"policyDocument\":"
		out.RawString(prefix)
		(in.PolicyDocument).MarshalEasyJSON(out)
	}
	if len(in.Context) != 0 {
		const prefix string = ",\"context\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v84First := true
			for v84Name, v84Value := range in.Context {
				if v84First {
					v84First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v84Name))
				out.RawByte(':')
				if m, ok := v84Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v84Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v84Value))
				}
			}
			out.RawByte('}')
		}
	}
	if in.UsageIdentifierKey != "" {
		const prefix string = ",\"usageIdentifierKey\":"
		out.RawString(prefix)
		out.String(string(in.UsageIdentifierKey))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v APIGatewayCustomAuthorizerResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v APIGatewayCustomAuthorizerResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *APIGatewayCustomAuthorizerResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *APIGatewayCustomAuthorizerResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents15(l, v)
}
func easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents16(in *jlexer.Lexer, out *APIGatewayCustomAuthorizerRequestTypeRequestIdentity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "apiKey":
			out.APIKey = string(in.String())
		case "sourceIp":
			out.SourceIP = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents16(out *jwriter.Writer, in APIGatewayCustomAuthorizerRequestTypeRequestIdentity) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"apiKey\":"
		out.RawString(prefix[1:])
		out.String(string(in.APIKey))
	}
	{
		const prefix string = ",\"sourceIp\":"
		out.RawString(prefix)
		out.String(string(in.SourceIP))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v APIGatewayCustomAuthorizerRequestTypeRequestIdentity) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v APIGatewayCustomAuthorizerRequestTypeRequestIdentity) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *APIGatewayCustomAuthorizerRequestTypeRequestIdentity) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *APIGatewayCustomAuthorizerRequestTypeRequestIdentity) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents16(l, v)
}
func easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents17(in *jlexer.Lexer, out *APIGatewayCustomAuthorizerRequestTypeRequestContext) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "path":
			out.Path = string(in.String())
		case "accountId":
			out.AccountID = string(in.String())
		case "resourceId":
			out.ResourceID = string(in.String())
		case "stage":
			out.Stage = string(in.String())
		case "requestId":
			out.RequestID = string(in.String())
		case "identity":
			(out.Identity).UnmarshalEasyJSON(in)
		case "resourcePath":
			out.ResourcePath = string(in.String())
		case "httpMethod":
			out.HTTPMethod = string(in.String())
		case "apiId":
			out.APIID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents17(out *jwriter.Writer, in APIGatewayCustomAuthorizerRequestTypeRequestContext) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"path\":"
		out.RawString(prefix[1:])
		out.String(string(in.Path))
	}
	{
		const prefix string = ",\"accountId\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"resourceId\":"
		out.RawString(prefix)
		out.String(string(in.ResourceID))
	}
	{
		const prefix string = ",\"stage\":"
		out.RawString(prefix)
		out.String(string(in.Stage))
	}
	{
		const prefix string = ",\"requestId\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	{
		const prefix string = ",\"identity\":"
		out.RawString(prefix)
		(in.Identity).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"resourcePath\":"
		out.RawString(prefix)
		out.String(string(in.ResourcePath))
	}
	{
		const prefix string = ",\"httpMethod\":"
		out.RawString(prefix)
		out.String(string(in.HTTPMethod))
	}
	{
		const prefix string = ",\"apiId\":"
		out.RawString(prefix)
		out.String(string(in.APIID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v APIGatewayCustomAuthorizerRequestTypeRequestContext) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v APIGatewayCustomAuthorizerRequestTypeRequestContext) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *APIGatewayCustomAuthorizerRequestTypeRequestContext) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *APIGatewayCustomAuthorizerRequestTypeRequestContext) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents17(l, v)
}
func easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents18(in *jlexer.Lexer, out *APIGatewayCustomAuthorizerRequestTypeRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "methodArn":
			out.MethodArn = string(in.String())
		case "resource":
			out.Resource = string(in.String())
		case "path":
			out.Path = string(in.String())
		case "httpMethod":
			out.HTTPMethod = string(in.String())
		case "headers":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Headers = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v85 string
					v85 = string(in.String())
					(out.Headers)[key] = v85
					in.WantComma()
				}
				in.Delim('}')
			}
		case "multiValueHeaders":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.MultiValueHeaders = make(map[string][]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v86 []string
					if in.IsNull() {
						in.Skip()
						v86 = nil
					} else {
						in.Delim('[')
						if v86 == nil {
							if !in.IsDelim(']') {
								v86 = make([]string, 0, 4)
							} else {
								v86 = []string{}
							}
						} else {
							v86 = (v86)[:0]
						}
						for !in.IsDelim(']') {
							var v87 string
							v87 = string(in.String())
							v86 = append(v86, v87)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.MultiValueHeaders)[key] = v86
					in.WantComma()
				}
				in.Delim('}')
			}
		case "queryStringParameters":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.QueryStringParameters = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v88 string
					v88 = string(in.String())
					(out.QueryStringParameters)[key] = v88
					in.WantComma()
				}
				in.Delim('}')
			}
		case "multiValueQueryStringParameters":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.MultiValueQueryStringParameters = make(map[string][]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v89 []string
					if in.IsNull() {
						in.Skip()
						v89 = nil
					} else {
						in.Delim('[')
						if v89 == nil {
							if !in.IsDelim(']') {
								v89 = make([]string, 0, 4)
							} else {
								v89 = []string{}
							}
						} else {
							v89 = (v89)[:0]
						}
						for !in.IsDelim(']') {
							var v90 string
							v90 = string(in.String())
							v89 = append(v89, v90)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.MultiValueQueryStringParameters)[key] = v89
					in.WantComma()
				}
				in.Delim('}')
			}
		case "pathParameters":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.PathParameters = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v91 string
					v91 = string(in.String())
					(out.PathParameters)[key] = v91
					in.WantComma()
				}
				in.Delim('}')
			}
		case "stageVariables":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.StageVariables = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v92 string
					v92 = string(in.String())
					(out.StageVariables)[key] = v92
					in.WantComma()
				}
				in.Delim('}')
			}
		case "requestContext":
			(out.RequestContext).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents18(out *jwriter.Writer, in APIGatewayCustomAuthorizerRequestTypeRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"methodArn\":"
		out.RawString(prefix)
		out.String(string(in.MethodArn))
	}
	{
		const prefix string = ",\"resource\":"
		out.RawString(prefix)
		out.String(string(in.Resource))
	}
	{
		const prefix string = ",\"path\":"
		out.RawString(prefix)
		out.String(string(in.Path))
	}
	{
		const prefix string = ",\"httpMethod\":"
		out.RawString(prefix)
		out.String(string(in.HTTPMethod))
	}
	{
		const prefix string = ",\"headers\":"
		out.RawString(prefix)
		if in.Headers == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v93First := true
			for v93Name, v93Value := range in.Headers {
				if v93First {
					v93First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v93Name))
				out.RawByte(':')
				out.String(string(v93Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"multiValueHeaders\":"
		out.RawString(prefix)
		if in.MultiValueHeaders == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v94First := true
			for v94Name, v94Value := range in.MultiValueHeaders {
				if v94First {
					v94First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v94Name))
				out.RawByte(':')
				if v94Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v95, v96 := range v94Value {
						if v95 > 0 {
							out.RawByte(',')
						}
						out.String(string(v96))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"queryStringParameters\":"
		out.RawString(prefix)
		if in.QueryStringParameters == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v97First := true
			for v97Name, v97Value := range in.QueryStringParameters {
				if v97First {
					v97First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v97Name))
				out.RawByte(':')
				out.String(string(v97Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"multiValueQueryStringParameters\":"
		out.RawString(prefix)
		if in.MultiValueQueryStringParameters == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v98First := true
			for v98Name, v98Value := range in.MultiValueQueryStringParameters {
				if v98First {
					v98First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v98Name))
				out.RawByte(':')
				if v98Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v99, v100 := range v98Value {
						if v99 > 0 {
							out.RawByte(',')
						}
						out.String(string(v100))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"pathParameters\":"
		out.RawString(prefix)
		if in.PathParameters == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v101First := true
			for v101Name, v101Value := range in.PathParameters {
				if v101First {
					v101First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v101Name))
				out.RawByte(':')
				out.String(string(v101Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"stageVariables\":"
		out.RawString(prefix)
		if in.StageVariables == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v102First := true
			for v102Name, v102Value := range in.StageVariables {
				if v102First {
					v102First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v102Name))
				out.RawByte(':')
				out.String(string(v102Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"requestContext\":"
		out.RawString(prefix)
		(in.RequestContext).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v APIGatewayCustomAuthorizerRequestTypeRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v APIGatewayCustomAuthorizerRequestTypeRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *APIGatewayCustomAuthorizerRequestTypeRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *APIGatewayCustomAuthorizerRequestTypeRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents18(l, v)
}
func easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents19(in *jlexer.Lexer, out *APIGatewayCustomAuthorizerRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "authorizationToken":
			out.AuthorizationToken = string(in.String())
		case "methodArn":
			out.MethodArn = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents19(out *jwriter.Writer, in APIGatewayCustomAuthorizerRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"authorizationToken\":"
		out.RawString(prefix)
		out.String(string(in.AuthorizationToken))
	}
	{
		const prefix string = ",\"methodArn\":"
		out.RawString(prefix)
		out.String(string(in.MethodArn))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v APIGatewayCustomAuthorizerRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v APIGatewayCustomAuthorizerRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *APIGatewayCustomAuthorizerRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *APIGatewayCustomAuthorizerRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents19(l, v)
}
func easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents20(in *jlexer.Lexer, out *APIGatewayCustomAuthorizerPolicy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Version":
			out.Version = string(in.String())
		case "Statement":
			if in.IsNull() {
				in.Skip()
				out.Statement = nil
			} else {
				in.Delim('[')
				if out.Statement == nil {
					if !in.IsDelim(']') {
						out.Statement = make([]IAMPolicyStatement, 0, 1)
					} else {
						out.Statement = []IAMPolicyStatement{}
					}
				} else {
					out.Statement = (out.Statement)[:0]
				}
				for !in.IsDelim(']') {
					var v103 IAMPolicyStatement
					(v103).UnmarshalEasyJSON(in)
					out.Statement = append(out.Statement, v103)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents20(out *jwriter.Writer, in APIGatewayCustomAuthorizerPolicy) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Version\":"
		out.RawString(prefix[1:])
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"Statement\":"
		out.RawString(prefix)
		if in.Statement == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v104, v105 := range in.Statement {
				if v104 > 0 {
					out.RawByte(',')
				}
				(v105).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v APIGatewayCustomAuthorizerPolicy) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v APIGatewayCustomAuthorizerPolicy) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *APIGatewayCustomAuthorizerPolicy) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *APIGatewayCustomAuthorizerPolicy) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents20(l, v)
}
func easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents21(in *jlexer.Lexer, out *APIGatewayCustomAuthorizerContext) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "principalId":
			if in.IsNull() {
				in.Skip()
				out.PrincipalID = nil
			} else {
				if out.PrincipalID == nil {
					out.PrincipalID = new(string)
				}
				*out.PrincipalID = string(in.String())
			}
		case "stringKey":
			if in.IsNull() {
				in.Skip()
				out.StringKey = nil
			} else {
				if out.StringKey == nil {
					out.StringKey = new(string)
				}
				*out.StringKey = string(in.String())
			}
		case "numKey":
			if in.IsNull() {
				in.Skip()
				out.NumKey = nil
			} else {
				if out.NumKey == nil {
					out.NumKey = new(int)
				}
				*out.NumKey = int(in.Int())
			}
		case "boolKey":
			if in.IsNull() {
				in.Skip()
				out.BoolKey = nil
			} else {
				if out.BoolKey == nil {
					out.BoolKey = new(bool)
				}
				*out.BoolKey = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents21(out *jwriter.Writer, in APIGatewayCustomAuthorizerContext) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"principalId\":"
		out.RawString(prefix[1:])
		if in.PrincipalID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.PrincipalID))
		}
	}
	if in.StringKey != nil {
		const prefix string = ",\"stringKey\":"
		out.RawString(prefix)
		out.String(string(*in.StringKey))
	}
	if in.NumKey != nil {
		const prefix string = ",\"numKey\":"
		out.RawString(prefix)
		out.Int(int(*in.NumKey))
	}
	if in.BoolKey != nil {
		const prefix string = ",\"boolKey\":"
		out.RawString(prefix)
		out.Bool(bool(*in.BoolKey))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v APIGatewayCustomAuthorizerContext) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v APIGatewayCustomAuthorizerContext) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC750011cEncodeGithubComAuditrIoAuditrAgentGoLambdaEvents21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *APIGatewayCustomAuthorizerContext) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *APIGatewayCustomAuthorizerContext) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC750011cDecodeGithubComAuditrIoAuditrAgentGoLambdaEvents21(l, v)
}
